max-nofile = 10000
daemonize = false
rootdir   = /tmp/

server {
    host    = www.example.com
    addr    = 127.0.0.1
    port    = 8081
    backlog = 1024
    threads = 1

    read-timeout    = 10
    write-timeout   = 10
    pending-timeout = 10
    max-pending     = 1

    headers {
        x-forwarded-for   = true
    }

    logging {
        enabled   = true
        type      = file
        filename  = "./rproxy.log"
        errorlog  = "./rproxy_error.log"
        format    = '{SRC} {PROXY} [{TS}] "{METH} {URI} {PROTO}" - {STATUS} - "{REF}" - "{UA}" - "{HOST}"'
	}

    rewrite {
        src = "^(/simple).*"
        dst = "/simple"
    }

    rewrite {
        src = "^(/notfound).*"
        dst = "/notfound"
    }

    rewrite {
        src = "^(/busy).*"
        dst = "/busy"
    }

    rewrite {
        src = "^(/rewritten).*"
        dst = "/nettirwer"
    }

    rewrite {
        src = "^(/badrewrite).*"
        dst = "/asdf"
    }

    rewrite {
        src = "^(/data).*"
        dst = "/data"
    }

    rewrite {
        src = "^(/forwarded).*"
        dst = "/forwarded"
    }

    rewrite {
        src = "^(/slowdata).*"
        dst = "/slowdata"
    }

    rewrite {
        src = "^(/badchunklength).*"
        dst = "/badchunklength"
    }

    rewrite {
        src = "^(/badchunktransfer).*"
        dst = "/badchunktransfer"
    }

    downstream {
        addr        = "127.0.0.1"
        port        = 8090
        connections = 1

        retry {
            seconds  = 1
            useconds = 0
        }
    }
}

server {
    host    = www.example.com
    addr    = 127.0.0.1
    port    = 8082
    backlog = 1024
    threads = 1

    read-timeout    = 10
    write-timeout   = 10
    pending-timeout = 10
    max-pending     = 1

    logging {
        enabled   = true
        type      = file
        filename  = "./rproxy.log"
        errorlog  = "./rproxy_error.log"
        format    = '{SRC} {PROXY} [{TS}] "{METH} {URI} {PROTO}" - {STATUS} - "{REF}" - "{UA}" - "{HOST}"'
    }

    ssl {
        enabled       = true
        protocols-on  = { TLSv1, SSLv3 }
        protocols-off = { SSLv2        }
        cert          = "./test/smoke/server.crt"
        key           = "./test/smoke/server.key"
        ciphers       = "eNULL:RC4-SHA"
        verify-peer   = false
        cache-enabled = false
	}

    rewrite {
        src = "^(/simple).*"
        dst = "/simple"
    }

    downstream {
        addr        = "127.0.0.1"
        port        = 8090
        connections = 1

        retry {
            seconds  = 1
            useconds = 0
        }
    }
}

server {
    host    = www.example.com
    addr    = 127.0.0.1
    port    = 8083
    backlog = 1024
    threads = 1

    read-timeout    = 10
    write-timeout   = 10
    pending-timeout = 10
    max-pending     = 1

    headers {
        x-ssl-subject     = true
        x-ssl-issuer      = true
        x-ssl-notbefore   = true
        x-ssl-notafter    = true
        x-ssl-serial      = true
        x-ssl-cipher      = true
        x-ssl-certificate = true

        x509-extension {
            name = "x-ssl-extension"
            oid  = "1.2.3.4"
        }
    }

    logging {
        enabled   = true
        type      = file
        filename  = "./rproxy.log"
        errorlog  = "./rproxy_error.log"
        format    = '{SRC} {PROXY} [{TS}] "{METH} {URI} {PROTO}" - {STATUS} - "{REF}" - "{UA}" - "{HOST}"'
    }

    ssl {
        enabled             = true
        protocols-on        = { TLSv1, SSLv3 }
        protocols-off       = { SSLv2        }
        cert                = "./test/smoke/server.crt"
        key                 = "./test/smoke/server.key"
        ca                  = "./test/smoke/ca.crt"
        ciphers             = "eNULL:RC4-SHA"
        verify-peer         = true
        enforce-peer-cert 	= true
        verify-depth        = 4
        cache-enabled       = false
    }

    rewrite {
        src = "^(/simple).*"
        dst = "/simple"
    }

    rewrite {
        src = "^(/subject).*"
        dst = "/subject"
    }

    rewrite {
        src = "^(/issuer).*"
        dst = "/issuer"
    }

    rewrite {
        src = "^(/notbefore).*"
        dst = "/notbefore"
    }

    rewrite {
        src = "^(/notafter).*"
        dst = "/notafter"
    }

    rewrite {
        src = "^(/serial).*"
        dst = "/serial"
    }

    rewrite {
        src = "^(/cipher).*"
        dst = "/cipher"
    }

    rewrite {
        src = "^(/certificate).*"
        dst = "/certificate"
    }

    rewrite {
        src = "^(/useragent).*"
        dst = "/useragent"
    }

    rewrite {
        src = "^(/host).*"
        dst = "/host"
    }

    rewrite {
        src = "^(/accept).*"
        dst = "/accept"
    }

    rewrite {
        src = "^(/extension).*"
        dst = "/extension"
    }

    rewrite {
        src = "^(/slowdata).*"
        dst = "/slowdata"
    }

    rewrite {
        src = "^(/badchunklength).*"
        dst = "/badchunklength"
    }

    rewrite {
        src = "^(/badchunktransfer).*"
        dst = "/badchunktransfer"
    }

    downstream {
        addr        = "127.0.0.1"
        port        = 8090
        connections = 1

        retry {
            seconds  = 1
            useconds = 0
        }
    }
}

server {
    # server to test out round-robin load balancing.
    host    = www.example.com
    addr    = 127.0.0.1
    port    = 8084
    backlog = 1024
    threads = 1

    read-timeout    = 10
    write-timeout   = 10
    pending-timeout = 10
    max-pending     = 1
    lb-method       = roundrobin

		logging {
			enabled = false
		}

    rewrite {
        src = "^(/test_rr).*"
        dst = "/test_rr"
    }

    downstream {
        addr        = 127.0.0.1
        port        = 8090
        connections = 1

        retry {
            seconds  = 1
            useconds = 0
        }
    }

    downstream {
        addr = 127.0.0.1
        port = 8091
	      connections = 1

        retry {
            seconds = 1
            useconds = 0
        }
    }
}
